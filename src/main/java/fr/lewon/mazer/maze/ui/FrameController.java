package fr.lewon.mazer.maze.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import fr.lewon.mazer.maze.Maze;
import fr.lewon.mazer.maze.solvers.ISolver;
import fr.lewon.mazer.maze.solvers.Solvers;

import javax.swing.*;
import java.awt.*;

public class FrameController {

    private MazeDraftsman draftsman;
    private Maze maze;
    private ISolver solver;
    private JFrame jFrame;
    private JPanel mainPane;
    private JButton genMazeBtn;
    private JButton solveMazeBtn;
    private JTextField colsField;
    private JTextField rowsField;
    private JPanel mazePanel;
    private JComboBox solverComboBox;
    private boolean drawSolver;

    public FrameController() {
        this.genMazeBtn.addActionListener(e -> {
            this.genMazeBtn.setEnabled(false);
            this.solveMazeBtn.setEnabled(false);
            this.drawSolver = false;
            this.maze = new Maze(Integer.parseInt(this.rowsField.getText()), Integer.parseInt(this.colsField.getText()));
            new Thread(() -> {
                this.maze.generate(0, 0, 0.04f);
                this.genMazeBtn.setEnabled(true);
                this.solveMazeBtn.setEnabled(true);
            }).start();
        });
        this.solveMazeBtn.addActionListener(e -> {
            this.genMazeBtn.setEnabled(false);
            this.solveMazeBtn.setEnabled(false);
            this.solver = ((Solvers) this.solverComboBox.getSelectedItem()).getImpl();
            this.drawSolver = true;
            new Thread(() -> {
                this.solver.solveMaze(this.maze, this.maze.getTiles()[0][0], this.maze.getTiles()[this.maze.getRowCount() - 1][this.maze.getColCount() - 1]);
                this.genMazeBtn.setEnabled(true);
                this.solveMazeBtn.setEnabled(true);
            }).start();
        });
        for (Solvers s : Solvers.values()) {
            this.solverComboBox.addItem(s);
        }
    }

    public void initFrame() {
        this.draftsman = new MazeDraftsman();
        this.mazePanel.add(new JPanel() {
            private static final long serialVersionUID = 1086706268056637341L;

            @Override
            public void paint(Graphics g) {
                super.paint(g);
                super.getRootPane().updateUI();
                if (FrameController.this.maze != null) {
                    int rowCount = FrameController.this.maze.getRowCount();
                    int colCount = FrameController.this.maze.getColCount();
                    double tileHeight = (double) FrameController.this.mazePanel.getHeight() / (double) rowCount;
                    double tileWidth = (double) FrameController.this.mazePanel.getWidth() / (double) colCount;
                    double tileSize = Math.min(tileHeight, tileWidth);

                    if (FrameController.this.drawSolver) {
                        FrameController.this.draftsman.drawSolver(g, FrameController.this.solver, this.getX(), this.getY(), tileSize);
                    }
                    FrameController.this.draftsman.drawMaze(g, FrameController.this.maze, this.getX(), this.getY(), tileSize);
                }
            }
        });

        this.jFrame = new JFrame("MazeR");
        this.jFrame.setContentPane(this.mainPane);
        this.jFrame.setMinimumSize(this.mainPane.getMinimumSize());
        this.jFrame.setPreferredSize(this.mainPane.getPreferredSize());
        this.jFrame.setVisible(true);
        this.jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        this.$$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPane = new JPanel();
        mainPane.setLayout(new GridLayoutManager(2, 5, new Insets(0, 0, 0, 0), -1, -1));
        mainPane.setMinimumSize(new Dimension(600, 400));
        mainPane.setOpaque(true);
        mainPane.setPreferredSize(new Dimension(1080, 720));
        mazePanel = new JPanel();
        mazePanel.setLayout(new BorderLayout(0, 0));
        mainPane.add(mazePanel, new GridConstraints(0, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        genMazeBtn = new JButton();
        genMazeBtn.setText("Generate Maze");
        mainPane.add(genMazeBtn, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        solveMazeBtn = new JButton();
        solveMazeBtn.setEnabled(false);
        solveMazeBtn.setText("Solve Maze");
        mainPane.add(solveMazeBtn, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        colsField = new JTextField();
        mainPane.add(colsField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, -1), null, 0, false));
        rowsField = new JTextField();
        rowsField.setText("");
        mainPane.add(rowsField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, -1), null, 0, false));
        solverComboBox = new JComboBox();
        solverComboBox.setName("Solver");
        mainPane.add(solverComboBox, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPane;
    }

}
